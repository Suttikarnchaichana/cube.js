// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';


export enum HttpCommand {
  NONE = 0,
  HttpQuery = 1,
  HttpResultSet = 2,
  HttpError = 3
}

export function unionToHttpCommand(
  type: HttpCommand,
  accessor: (obj:HttpError|HttpQuery|HttpResultSet) => HttpError|HttpQuery|HttpResultSet|null
): HttpError|HttpQuery|HttpResultSet|null {
  switch(HttpCommand[type]) {
    case 'NONE': return null; 
    case 'HttpQuery': return accessor(new HttpQuery())! as HttpQuery;
    case 'HttpResultSet': return accessor(new HttpResultSet())! as HttpResultSet;
    case 'HttpError': return accessor(new HttpError())! as HttpError;
    default: return null;
  }
}

export function unionListToHttpCommand(
  type: HttpCommand, 
  accessor: (index: number, obj:HttpError|HttpQuery|HttpResultSet) => HttpError|HttpQuery|HttpResultSet|null, 
  index: number
): HttpError|HttpQuery|HttpResultSet|null {
  switch(HttpCommand[type]) {
    case 'NONE': return null; 
    case 'HttpQuery': return accessor(index, new HttpQuery())! as HttpQuery;
    case 'HttpResultSet': return accessor(index, new HttpResultSet())! as HttpResultSet;
    case 'HttpError': return accessor(index, new HttpError())! as HttpError;
    default: return null;
  }
}

export class HttpMessage {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):HttpMessage {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsHttpMessage(bb:flatbuffers.ByteBuffer, obj?:HttpMessage):HttpMessage {
  return (obj || new HttpMessage()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsHttpMessage(bb:flatbuffers.ByteBuffer, obj?:HttpMessage):HttpMessage {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new HttpMessage()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

messageId():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readUint32(this.bb_pos + offset) : 0;
}

commandType():HttpCommand {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readUint8(this.bb_pos + offset) : HttpCommand.NONE;
}

command<T extends flatbuffers.Table>(obj:any):any|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__union(obj, this.bb_pos + offset) : null;
}

static startHttpMessage(builder:flatbuffers.Builder) {
  builder.startObject(3);
}

static addMessageId(builder:flatbuffers.Builder, messageId:number) {
  builder.addFieldInt32(0, messageId, 0);
}

static addCommandType(builder:flatbuffers.Builder, commandType:HttpCommand) {
  builder.addFieldInt8(1, commandType, HttpCommand.NONE);
}

static addCommand(builder:flatbuffers.Builder, commandOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, commandOffset, 0);
}

static endHttpMessage(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static finishHttpMessageBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset);
}

static finishSizePrefixedHttpMessageBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, undefined, true);
}

static createHttpMessage(builder:flatbuffers.Builder, messageId:number, commandType:HttpCommand, commandOffset:flatbuffers.Offset):flatbuffers.Offset {
  HttpMessage.startHttpMessage(builder);
  HttpMessage.addMessageId(builder, messageId);
  HttpMessage.addCommandType(builder, commandType);
  HttpMessage.addCommand(builder, commandOffset);
  return HttpMessage.endHttpMessage(builder);
}
}

export class HttpQuery {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):HttpQuery {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsHttpQuery(bb:flatbuffers.ByteBuffer, obj?:HttpQuery):HttpQuery {
  return (obj || new HttpQuery()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsHttpQuery(bb:flatbuffers.ByteBuffer, obj?:HttpQuery):HttpQuery {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new HttpQuery()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

query():string|null
query(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
query(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

traceObj():string|null
traceObj(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
traceObj(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

inlineTables(index: number, obj?:HttpTable):HttpTable|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? (obj || new HttpTable()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

inlineTablesLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

static startHttpQuery(builder:flatbuffers.Builder) {
  builder.startObject(3);
}

static addQuery(builder:flatbuffers.Builder, queryOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, queryOffset, 0);
}

static addTraceObj(builder:flatbuffers.Builder, traceObjOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, traceObjOffset, 0);
}

static addInlineTables(builder:flatbuffers.Builder, inlineTablesOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, inlineTablesOffset, 0);
}

static createInlineTablesVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startInlineTablesVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static endHttpQuery(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createHttpQuery(builder:flatbuffers.Builder, queryOffset:flatbuffers.Offset, traceObjOffset:flatbuffers.Offset, inlineTablesOffset:flatbuffers.Offset):flatbuffers.Offset {
  HttpQuery.startHttpQuery(builder);
  HttpQuery.addQuery(builder, queryOffset);
  HttpQuery.addTraceObj(builder, traceObjOffset);
  HttpQuery.addInlineTables(builder, inlineTablesOffset);
  return HttpQuery.endHttpQuery(builder);
}
}

export class HttpTable {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):HttpTable {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsHttpTable(bb:flatbuffers.ByteBuffer, obj?:HttpTable):HttpTable {
  return (obj || new HttpTable()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsHttpTable(bb:flatbuffers.ByteBuffer, obj?:HttpTable):HttpTable {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new HttpTable()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

name():string|null
name(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
name(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

columns(index: number):string
columns(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
columns(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

columnsLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

types(index: number):string
types(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
types(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

typesLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

csvRows():string|null
csvRows(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
csvRows(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

static startHttpTable(builder:flatbuffers.Builder) {
  builder.startObject(4);
}

static addName(builder:flatbuffers.Builder, nameOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, nameOffset, 0);
}

static addColumns(builder:flatbuffers.Builder, columnsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, columnsOffset, 0);
}

static createColumnsVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startColumnsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addTypes(builder:flatbuffers.Builder, typesOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, typesOffset, 0);
}

static createTypesVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startTypesVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addCsvRows(builder:flatbuffers.Builder, csvRowsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(3, csvRowsOffset, 0);
}

static endHttpTable(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createHttpTable(builder:flatbuffers.Builder, nameOffset:flatbuffers.Offset, columnsOffset:flatbuffers.Offset, typesOffset:flatbuffers.Offset, csvRowsOffset:flatbuffers.Offset):flatbuffers.Offset {
  HttpTable.startHttpTable(builder);
  HttpTable.addName(builder, nameOffset);
  HttpTable.addColumns(builder, columnsOffset);
  HttpTable.addTypes(builder, typesOffset);
  HttpTable.addCsvRows(builder, csvRowsOffset);
  return HttpTable.endHttpTable(builder);
}
}

export class HttpError {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):HttpError {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsHttpError(bb:flatbuffers.ByteBuffer, obj?:HttpError):HttpError {
  return (obj || new HttpError()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsHttpError(bb:flatbuffers.ByteBuffer, obj?:HttpError):HttpError {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new HttpError()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

error():string|null
error(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
error(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

static startHttpError(builder:flatbuffers.Builder) {
  builder.startObject(1);
}

static addError(builder:flatbuffers.Builder, errorOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, errorOffset, 0);
}

static endHttpError(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createHttpError(builder:flatbuffers.Builder, errorOffset:flatbuffers.Offset):flatbuffers.Offset {
  HttpError.startHttpError(builder);
  HttpError.addError(builder, errorOffset);
  return HttpError.endHttpError(builder);
}
}

export class HttpResultSet {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):HttpResultSet {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsHttpResultSet(bb:flatbuffers.ByteBuffer, obj?:HttpResultSet):HttpResultSet {
  return (obj || new HttpResultSet()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsHttpResultSet(bb:flatbuffers.ByteBuffer, obj?:HttpResultSet):HttpResultSet {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new HttpResultSet()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

columns(index: number):string
columns(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
columns(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

columnsLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

rows(index: number, obj?:HttpRow):HttpRow|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? (obj || new HttpRow()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

rowsLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

static startHttpResultSet(builder:flatbuffers.Builder) {
  builder.startObject(2);
}

static addColumns(builder:flatbuffers.Builder, columnsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, columnsOffset, 0);
}

static createColumnsVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startColumnsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addRows(builder:flatbuffers.Builder, rowsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, rowsOffset, 0);
}

static createRowsVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startRowsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static endHttpResultSet(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createHttpResultSet(builder:flatbuffers.Builder, columnsOffset:flatbuffers.Offset, rowsOffset:flatbuffers.Offset):flatbuffers.Offset {
  HttpResultSet.startHttpResultSet(builder);
  HttpResultSet.addColumns(builder, columnsOffset);
  HttpResultSet.addRows(builder, rowsOffset);
  return HttpResultSet.endHttpResultSet(builder);
}
}

export class HttpRow {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):HttpRow {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsHttpRow(bb:flatbuffers.ByteBuffer, obj?:HttpRow):HttpRow {
  return (obj || new HttpRow()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsHttpRow(bb:flatbuffers.ByteBuffer, obj?:HttpRow):HttpRow {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new HttpRow()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

values(index: number, obj?:HttpColumnValue):HttpColumnValue|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? (obj || new HttpColumnValue()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

valuesLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

static startHttpRow(builder:flatbuffers.Builder) {
  builder.startObject(1);
}

static addValues(builder:flatbuffers.Builder, valuesOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, valuesOffset, 0);
}

static createValuesVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startValuesVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static endHttpRow(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createHttpRow(builder:flatbuffers.Builder, valuesOffset:flatbuffers.Offset):flatbuffers.Offset {
  HttpRow.startHttpRow(builder);
  HttpRow.addValues(builder, valuesOffset);
  return HttpRow.endHttpRow(builder);
}
}

export class HttpColumnValue {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):HttpColumnValue {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsHttpColumnValue(bb:flatbuffers.ByteBuffer, obj?:HttpColumnValue):HttpColumnValue {
  return (obj || new HttpColumnValue()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsHttpColumnValue(bb:flatbuffers.ByteBuffer, obj?:HttpColumnValue):HttpColumnValue {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new HttpColumnValue()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

stringValue():string|null
stringValue(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
stringValue(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

static startHttpColumnValue(builder:flatbuffers.Builder) {
  builder.startObject(1);
}

static addStringValue(builder:flatbuffers.Builder, stringValueOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, stringValueOffset, 0);
}

static endHttpColumnValue(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createHttpColumnValue(builder:flatbuffers.Builder, stringValueOffset:flatbuffers.Offset):flatbuffers.Offset {
  HttpColumnValue.startHttpColumnValue(builder);
  HttpColumnValue.addStringValue(builder, stringValueOffset);
  return HttpColumnValue.endHttpColumnValue(builder);
}
}

